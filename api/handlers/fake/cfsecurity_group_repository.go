// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/handlers"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type CFSecurityGroupRepository struct {
	BindRunningSecurityGroupStub        func(context.Context, authorization.Info, repositories.BindRunningSecurityGroupMessage) (repositories.SecurityGroupRecord, error)
	bindRunningSecurityGroupMutex       sync.RWMutex
	bindRunningSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.BindRunningSecurityGroupMessage
	}
	bindRunningSecurityGroupReturns struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	bindRunningSecurityGroupReturnsOnCall map[int]struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	BindStagingSecurityGroupStub        func(context.Context, authorization.Info, repositories.BindStagingSecurityGroupMessage) (repositories.SecurityGroupRecord, error)
	bindStagingSecurityGroupMutex       sync.RWMutex
	bindStagingSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.BindStagingSecurityGroupMessage
	}
	bindStagingSecurityGroupReturns struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	bindStagingSecurityGroupReturnsOnCall map[int]struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	CreateSecurityGroupStub        func(context.Context, authorization.Info, repositories.CreateSecurityGroupMessage) (repositories.SecurityGroupRecord, error)
	createSecurityGroupMutex       sync.RWMutex
	createSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.CreateSecurityGroupMessage
	}
	createSecurityGroupReturns struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	createSecurityGroupReturnsOnCall map[int]struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	DeleteSecurityGroupStub        func(context.Context, authorization.Info, string) error
	deleteSecurityGroupMutex       sync.RWMutex
	deleteSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}
	deleteSecurityGroupReturns struct {
		result1 error
	}
	deleteSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	GetSecurityGroupStub        func(context.Context, authorization.Info, string) (repositories.SecurityGroupRecord, error)
	getSecurityGroupMutex       sync.RWMutex
	getSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}
	getSecurityGroupReturns struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	getSecurityGroupReturnsOnCall map[int]struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	ListSecurityGroupsStub        func(context.Context, authorization.Info, repositories.ListSecurityGroupMessage) ([]repositories.SecurityGroupRecord, error)
	listSecurityGroupsMutex       sync.RWMutex
	listSecurityGroupsArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ListSecurityGroupMessage
	}
	listSecurityGroupsReturns struct {
		result1 []repositories.SecurityGroupRecord
		result2 error
	}
	listSecurityGroupsReturnsOnCall map[int]struct {
		result1 []repositories.SecurityGroupRecord
		result2 error
	}
	UnbindRunningSecurityGroupStub        func(context.Context, authorization.Info, repositories.UnbindRunningSecurityGroupMessage) error
	unbindRunningSecurityGroupMutex       sync.RWMutex
	unbindRunningSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.UnbindRunningSecurityGroupMessage
	}
	unbindRunningSecurityGroupReturns struct {
		result1 error
	}
	unbindRunningSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UnbindStagingSecurityGroupStub        func(context.Context, authorization.Info, repositories.UnbindStagingSecurityGroupMessage) error
	unbindStagingSecurityGroupMutex       sync.RWMutex
	unbindStagingSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.UnbindStagingSecurityGroupMessage
	}
	unbindStagingSecurityGroupReturns struct {
		result1 error
	}
	unbindStagingSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateSecurityGroupStub        func(context.Context, authorization.Info, repositories.UpdateSecurityGroupMessage) (repositories.SecurityGroupRecord, error)
	updateSecurityGroupMutex       sync.RWMutex
	updateSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.UpdateSecurityGroupMessage
	}
	updateSecurityGroupReturns struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	updateSecurityGroupReturnsOnCall map[int]struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFSecurityGroupRepository) BindRunningSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 repositories.BindRunningSecurityGroupMessage) (repositories.SecurityGroupRecord, error) {
	fake.bindRunningSecurityGroupMutex.Lock()
	ret, specificReturn := fake.bindRunningSecurityGroupReturnsOnCall[len(fake.bindRunningSecurityGroupArgsForCall)]
	fake.bindRunningSecurityGroupArgsForCall = append(fake.bindRunningSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.BindRunningSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.BindRunningSecurityGroupStub
	fakeReturns := fake.bindRunningSecurityGroupReturns
	fake.recordInvocation("BindRunningSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.bindRunningSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFSecurityGroupRepository) BindRunningSecurityGroupCallCount() int {
	fake.bindRunningSecurityGroupMutex.RLock()
	defer fake.bindRunningSecurityGroupMutex.RUnlock()
	return len(fake.bindRunningSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) BindRunningSecurityGroupCalls(stub func(context.Context, authorization.Info, repositories.BindRunningSecurityGroupMessage) (repositories.SecurityGroupRecord, error)) {
	fake.bindRunningSecurityGroupMutex.Lock()
	defer fake.bindRunningSecurityGroupMutex.Unlock()
	fake.BindRunningSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) BindRunningSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, repositories.BindRunningSecurityGroupMessage) {
	fake.bindRunningSecurityGroupMutex.RLock()
	defer fake.bindRunningSecurityGroupMutex.RUnlock()
	argsForCall := fake.bindRunningSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) BindRunningSecurityGroupReturns(result1 repositories.SecurityGroupRecord, result2 error) {
	fake.bindRunningSecurityGroupMutex.Lock()
	defer fake.bindRunningSecurityGroupMutex.Unlock()
	fake.BindRunningSecurityGroupStub = nil
	fake.bindRunningSecurityGroupReturns = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) BindRunningSecurityGroupReturnsOnCall(i int, result1 repositories.SecurityGroupRecord, result2 error) {
	fake.bindRunningSecurityGroupMutex.Lock()
	defer fake.bindRunningSecurityGroupMutex.Unlock()
	fake.BindRunningSecurityGroupStub = nil
	if fake.bindRunningSecurityGroupReturnsOnCall == nil {
		fake.bindRunningSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 repositories.SecurityGroupRecord
			result2 error
		})
	}
	fake.bindRunningSecurityGroupReturnsOnCall[i] = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) BindStagingSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 repositories.BindStagingSecurityGroupMessage) (repositories.SecurityGroupRecord, error) {
	fake.bindStagingSecurityGroupMutex.Lock()
	ret, specificReturn := fake.bindStagingSecurityGroupReturnsOnCall[len(fake.bindStagingSecurityGroupArgsForCall)]
	fake.bindStagingSecurityGroupArgsForCall = append(fake.bindStagingSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.BindStagingSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.BindStagingSecurityGroupStub
	fakeReturns := fake.bindStagingSecurityGroupReturns
	fake.recordInvocation("BindStagingSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.bindStagingSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFSecurityGroupRepository) BindStagingSecurityGroupCallCount() int {
	fake.bindStagingSecurityGroupMutex.RLock()
	defer fake.bindStagingSecurityGroupMutex.RUnlock()
	return len(fake.bindStagingSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) BindStagingSecurityGroupCalls(stub func(context.Context, authorization.Info, repositories.BindStagingSecurityGroupMessage) (repositories.SecurityGroupRecord, error)) {
	fake.bindStagingSecurityGroupMutex.Lock()
	defer fake.bindStagingSecurityGroupMutex.Unlock()
	fake.BindStagingSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) BindStagingSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, repositories.BindStagingSecurityGroupMessage) {
	fake.bindStagingSecurityGroupMutex.RLock()
	defer fake.bindStagingSecurityGroupMutex.RUnlock()
	argsForCall := fake.bindStagingSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) BindStagingSecurityGroupReturns(result1 repositories.SecurityGroupRecord, result2 error) {
	fake.bindStagingSecurityGroupMutex.Lock()
	defer fake.bindStagingSecurityGroupMutex.Unlock()
	fake.BindStagingSecurityGroupStub = nil
	fake.bindStagingSecurityGroupReturns = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) BindStagingSecurityGroupReturnsOnCall(i int, result1 repositories.SecurityGroupRecord, result2 error) {
	fake.bindStagingSecurityGroupMutex.Lock()
	defer fake.bindStagingSecurityGroupMutex.Unlock()
	fake.BindStagingSecurityGroupStub = nil
	if fake.bindStagingSecurityGroupReturnsOnCall == nil {
		fake.bindStagingSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 repositories.SecurityGroupRecord
			result2 error
		})
	}
	fake.bindStagingSecurityGroupReturnsOnCall[i] = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) CreateSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 repositories.CreateSecurityGroupMessage) (repositories.SecurityGroupRecord, error) {
	fake.createSecurityGroupMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupReturnsOnCall[len(fake.createSecurityGroupArgsForCall)]
	fake.createSecurityGroupArgsForCall = append(fake.createSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.CreateSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.CreateSecurityGroupStub
	fakeReturns := fake.createSecurityGroupReturns
	fake.recordInvocation("CreateSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.createSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFSecurityGroupRepository) CreateSecurityGroupCallCount() int {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	return len(fake.createSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) CreateSecurityGroupCalls(stub func(context.Context, authorization.Info, repositories.CreateSecurityGroupMessage) (repositories.SecurityGroupRecord, error)) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) CreateSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, repositories.CreateSecurityGroupMessage) {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	argsForCall := fake.createSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) CreateSecurityGroupReturns(result1 repositories.SecurityGroupRecord, result2 error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = nil
	fake.createSecurityGroupReturns = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) CreateSecurityGroupReturnsOnCall(i int, result1 repositories.SecurityGroupRecord, result2 error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = nil
	if fake.createSecurityGroupReturnsOnCall == nil {
		fake.createSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 repositories.SecurityGroupRecord
			result2 error
		})
	}
	fake.createSecurityGroupReturnsOnCall[i] = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) DeleteSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 string) error {
	fake.deleteSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteSecurityGroupReturnsOnCall[len(fake.deleteSecurityGroupArgsForCall)]
	fake.deleteSecurityGroupArgsForCall = append(fake.deleteSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteSecurityGroupStub
	fakeReturns := fake.deleteSecurityGroupReturns
	fake.recordInvocation("DeleteSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.deleteSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CFSecurityGroupRepository) DeleteSecurityGroupCallCount() int {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	return len(fake.deleteSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) DeleteSecurityGroupCalls(stub func(context.Context, authorization.Info, string) error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) DeleteSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, string) {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	argsForCall := fake.deleteSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) DeleteSecurityGroupReturns(result1 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	fake.deleteSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *CFSecurityGroupRepository) DeleteSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	if fake.deleteSecurityGroupReturnsOnCall == nil {
		fake.deleteSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CFSecurityGroupRepository) GetSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 string) (repositories.SecurityGroupRecord, error) {
	fake.getSecurityGroupMutex.Lock()
	ret, specificReturn := fake.getSecurityGroupReturnsOnCall[len(fake.getSecurityGroupArgsForCall)]
	fake.getSecurityGroupArgsForCall = append(fake.getSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetSecurityGroupStub
	fakeReturns := fake.getSecurityGroupReturns
	fake.recordInvocation("GetSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.getSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFSecurityGroupRepository) GetSecurityGroupCallCount() int {
	fake.getSecurityGroupMutex.RLock()
	defer fake.getSecurityGroupMutex.RUnlock()
	return len(fake.getSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) GetSecurityGroupCalls(stub func(context.Context, authorization.Info, string) (repositories.SecurityGroupRecord, error)) {
	fake.getSecurityGroupMutex.Lock()
	defer fake.getSecurityGroupMutex.Unlock()
	fake.GetSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) GetSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, string) {
	fake.getSecurityGroupMutex.RLock()
	defer fake.getSecurityGroupMutex.RUnlock()
	argsForCall := fake.getSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) GetSecurityGroupReturns(result1 repositories.SecurityGroupRecord, result2 error) {
	fake.getSecurityGroupMutex.Lock()
	defer fake.getSecurityGroupMutex.Unlock()
	fake.GetSecurityGroupStub = nil
	fake.getSecurityGroupReturns = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) GetSecurityGroupReturnsOnCall(i int, result1 repositories.SecurityGroupRecord, result2 error) {
	fake.getSecurityGroupMutex.Lock()
	defer fake.getSecurityGroupMutex.Unlock()
	fake.GetSecurityGroupStub = nil
	if fake.getSecurityGroupReturnsOnCall == nil {
		fake.getSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 repositories.SecurityGroupRecord
			result2 error
		})
	}
	fake.getSecurityGroupReturnsOnCall[i] = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) ListSecurityGroups(arg1 context.Context, arg2 authorization.Info, arg3 repositories.ListSecurityGroupMessage) ([]repositories.SecurityGroupRecord, error) {
	fake.listSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.listSecurityGroupsReturnsOnCall[len(fake.listSecurityGroupsArgsForCall)]
	fake.listSecurityGroupsArgsForCall = append(fake.listSecurityGroupsArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ListSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.ListSecurityGroupsStub
	fakeReturns := fake.listSecurityGroupsReturns
	fake.recordInvocation("ListSecurityGroups", []interface{}{arg1, arg2, arg3})
	fake.listSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFSecurityGroupRepository) ListSecurityGroupsCallCount() int {
	fake.listSecurityGroupsMutex.RLock()
	defer fake.listSecurityGroupsMutex.RUnlock()
	return len(fake.listSecurityGroupsArgsForCall)
}

func (fake *CFSecurityGroupRepository) ListSecurityGroupsCalls(stub func(context.Context, authorization.Info, repositories.ListSecurityGroupMessage) ([]repositories.SecurityGroupRecord, error)) {
	fake.listSecurityGroupsMutex.Lock()
	defer fake.listSecurityGroupsMutex.Unlock()
	fake.ListSecurityGroupsStub = stub
}

func (fake *CFSecurityGroupRepository) ListSecurityGroupsArgsForCall(i int) (context.Context, authorization.Info, repositories.ListSecurityGroupMessage) {
	fake.listSecurityGroupsMutex.RLock()
	defer fake.listSecurityGroupsMutex.RUnlock()
	argsForCall := fake.listSecurityGroupsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) ListSecurityGroupsReturns(result1 []repositories.SecurityGroupRecord, result2 error) {
	fake.listSecurityGroupsMutex.Lock()
	defer fake.listSecurityGroupsMutex.Unlock()
	fake.ListSecurityGroupsStub = nil
	fake.listSecurityGroupsReturns = struct {
		result1 []repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) ListSecurityGroupsReturnsOnCall(i int, result1 []repositories.SecurityGroupRecord, result2 error) {
	fake.listSecurityGroupsMutex.Lock()
	defer fake.listSecurityGroupsMutex.Unlock()
	fake.ListSecurityGroupsStub = nil
	if fake.listSecurityGroupsReturnsOnCall == nil {
		fake.listSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 []repositories.SecurityGroupRecord
			result2 error
		})
	}
	fake.listSecurityGroupsReturnsOnCall[i] = struct {
		result1 []repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) UnbindRunningSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 repositories.UnbindRunningSecurityGroupMessage) error {
	fake.unbindRunningSecurityGroupMutex.Lock()
	ret, specificReturn := fake.unbindRunningSecurityGroupReturnsOnCall[len(fake.unbindRunningSecurityGroupArgsForCall)]
	fake.unbindRunningSecurityGroupArgsForCall = append(fake.unbindRunningSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.UnbindRunningSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.UnbindRunningSecurityGroupStub
	fakeReturns := fake.unbindRunningSecurityGroupReturns
	fake.recordInvocation("UnbindRunningSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.unbindRunningSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CFSecurityGroupRepository) UnbindRunningSecurityGroupCallCount() int {
	fake.unbindRunningSecurityGroupMutex.RLock()
	defer fake.unbindRunningSecurityGroupMutex.RUnlock()
	return len(fake.unbindRunningSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) UnbindRunningSecurityGroupCalls(stub func(context.Context, authorization.Info, repositories.UnbindRunningSecurityGroupMessage) error) {
	fake.unbindRunningSecurityGroupMutex.Lock()
	defer fake.unbindRunningSecurityGroupMutex.Unlock()
	fake.UnbindRunningSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) UnbindRunningSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, repositories.UnbindRunningSecurityGroupMessage) {
	fake.unbindRunningSecurityGroupMutex.RLock()
	defer fake.unbindRunningSecurityGroupMutex.RUnlock()
	argsForCall := fake.unbindRunningSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) UnbindRunningSecurityGroupReturns(result1 error) {
	fake.unbindRunningSecurityGroupMutex.Lock()
	defer fake.unbindRunningSecurityGroupMutex.Unlock()
	fake.UnbindRunningSecurityGroupStub = nil
	fake.unbindRunningSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *CFSecurityGroupRepository) UnbindRunningSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.unbindRunningSecurityGroupMutex.Lock()
	defer fake.unbindRunningSecurityGroupMutex.Unlock()
	fake.UnbindRunningSecurityGroupStub = nil
	if fake.unbindRunningSecurityGroupReturnsOnCall == nil {
		fake.unbindRunningSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindRunningSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CFSecurityGroupRepository) UnbindStagingSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 repositories.UnbindStagingSecurityGroupMessage) error {
	fake.unbindStagingSecurityGroupMutex.Lock()
	ret, specificReturn := fake.unbindStagingSecurityGroupReturnsOnCall[len(fake.unbindStagingSecurityGroupArgsForCall)]
	fake.unbindStagingSecurityGroupArgsForCall = append(fake.unbindStagingSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.UnbindStagingSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.UnbindStagingSecurityGroupStub
	fakeReturns := fake.unbindStagingSecurityGroupReturns
	fake.recordInvocation("UnbindStagingSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.unbindStagingSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CFSecurityGroupRepository) UnbindStagingSecurityGroupCallCount() int {
	fake.unbindStagingSecurityGroupMutex.RLock()
	defer fake.unbindStagingSecurityGroupMutex.RUnlock()
	return len(fake.unbindStagingSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) UnbindStagingSecurityGroupCalls(stub func(context.Context, authorization.Info, repositories.UnbindStagingSecurityGroupMessage) error) {
	fake.unbindStagingSecurityGroupMutex.Lock()
	defer fake.unbindStagingSecurityGroupMutex.Unlock()
	fake.UnbindStagingSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) UnbindStagingSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, repositories.UnbindStagingSecurityGroupMessage) {
	fake.unbindStagingSecurityGroupMutex.RLock()
	defer fake.unbindStagingSecurityGroupMutex.RUnlock()
	argsForCall := fake.unbindStagingSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) UnbindStagingSecurityGroupReturns(result1 error) {
	fake.unbindStagingSecurityGroupMutex.Lock()
	defer fake.unbindStagingSecurityGroupMutex.Unlock()
	fake.UnbindStagingSecurityGroupStub = nil
	fake.unbindStagingSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *CFSecurityGroupRepository) UnbindStagingSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.unbindStagingSecurityGroupMutex.Lock()
	defer fake.unbindStagingSecurityGroupMutex.Unlock()
	fake.UnbindStagingSecurityGroupStub = nil
	if fake.unbindStagingSecurityGroupReturnsOnCall == nil {
		fake.unbindStagingSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindStagingSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CFSecurityGroupRepository) UpdateSecurityGroup(arg1 context.Context, arg2 authorization.Info, arg3 repositories.UpdateSecurityGroupMessage) (repositories.SecurityGroupRecord, error) {
	fake.updateSecurityGroupMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupReturnsOnCall[len(fake.updateSecurityGroupArgsForCall)]
	fake.updateSecurityGroupArgsForCall = append(fake.updateSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.UpdateSecurityGroupMessage
	}{arg1, arg2, arg3})
	stub := fake.UpdateSecurityGroupStub
	fakeReturns := fake.updateSecurityGroupReturns
	fake.recordInvocation("UpdateSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.updateSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFSecurityGroupRepository) UpdateSecurityGroupCallCount() int {
	fake.updateSecurityGroupMutex.RLock()
	defer fake.updateSecurityGroupMutex.RUnlock()
	return len(fake.updateSecurityGroupArgsForCall)
}

func (fake *CFSecurityGroupRepository) UpdateSecurityGroupCalls(stub func(context.Context, authorization.Info, repositories.UpdateSecurityGroupMessage) (repositories.SecurityGroupRecord, error)) {
	fake.updateSecurityGroupMutex.Lock()
	defer fake.updateSecurityGroupMutex.Unlock()
	fake.UpdateSecurityGroupStub = stub
}

func (fake *CFSecurityGroupRepository) UpdateSecurityGroupArgsForCall(i int) (context.Context, authorization.Info, repositories.UpdateSecurityGroupMessage) {
	fake.updateSecurityGroupMutex.RLock()
	defer fake.updateSecurityGroupMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFSecurityGroupRepository) UpdateSecurityGroupReturns(result1 repositories.SecurityGroupRecord, result2 error) {
	fake.updateSecurityGroupMutex.Lock()
	defer fake.updateSecurityGroupMutex.Unlock()
	fake.UpdateSecurityGroupStub = nil
	fake.updateSecurityGroupReturns = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) UpdateSecurityGroupReturnsOnCall(i int, result1 repositories.SecurityGroupRecord, result2 error) {
	fake.updateSecurityGroupMutex.Lock()
	defer fake.updateSecurityGroupMutex.Unlock()
	fake.UpdateSecurityGroupStub = nil
	if fake.updateSecurityGroupReturnsOnCall == nil {
		fake.updateSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 repositories.SecurityGroupRecord
			result2 error
		})
	}
	fake.updateSecurityGroupReturnsOnCall[i] = struct {
		result1 repositories.SecurityGroupRecord
		result2 error
	}{result1, result2}
}

func (fake *CFSecurityGroupRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindRunningSecurityGroupMutex.RLock()
	defer fake.bindRunningSecurityGroupMutex.RUnlock()
	fake.bindStagingSecurityGroupMutex.RLock()
	defer fake.bindStagingSecurityGroupMutex.RUnlock()
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	fake.getSecurityGroupMutex.RLock()
	defer fake.getSecurityGroupMutex.RUnlock()
	fake.listSecurityGroupsMutex.RLock()
	defer fake.listSecurityGroupsMutex.RUnlock()
	fake.unbindRunningSecurityGroupMutex.RLock()
	defer fake.unbindRunningSecurityGroupMutex.RUnlock()
	fake.unbindStagingSecurityGroupMutex.RLock()
	defer fake.unbindStagingSecurityGroupMutex.RUnlock()
	fake.updateSecurityGroupMutex.RLock()
	defer fake.updateSecurityGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFSecurityGroupRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.CFSecurityGroupRepository = new(CFSecurityGroupRepository)
